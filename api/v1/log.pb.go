// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

/*
Package log_v1 is a generated protocol buffer package.

It is generated from these files:
	log.proto

It has these top-level messages:
	ProduceRequest
	ProduceResponse
	ConsumeRequest
	ConsumeResponse
	Error
	RecordBatch
	Record
*/
package log_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProduceRequest struct {
	RecordBatch *RecordBatch `protobuf:"bytes,1,opt,name=record_batch,json=recordBatch" json:"record_batch,omitempty"`
}

func (m *ProduceRequest) Reset()                    { *m = ProduceRequest{} }
func (m *ProduceRequest) String() string            { return proto.CompactTextString(m) }
func (*ProduceRequest) ProtoMessage()               {}
func (*ProduceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProduceRequest) GetRecordBatch() *RecordBatch {
	if m != nil {
		return m.RecordBatch
	}
	return nil
}

type ProduceResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ProduceResponse) Reset()                    { *m = ProduceResponse{} }
func (m *ProduceResponse) String() string            { return proto.CompactTextString(m) }
func (*ProduceResponse) ProtoMessage()               {}
func (*ProduceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProduceResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ConsumeRequest struct {
	Offset  uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Records uint64 `protobuf:"varint,2,opt,name=records" json:"records,omitempty"`
}

func (m *ConsumeRequest) Reset()                    { *m = ConsumeRequest{} }
func (m *ConsumeRequest) String() string            { return proto.CompactTextString(m) }
func (*ConsumeRequest) ProtoMessage()               {}
func (*ConsumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConsumeRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeRequest) GetRecords() uint64 {
	if m != nil {
		return m.Records
	}
	return 0
}

type ConsumeResponse struct {
	Error       *Error       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	RecordBatch *RecordBatch `protobuf:"bytes,2,opt,name=record_batch,json=recordBatch" json:"record_batch,omitempty"`
}

func (m *ConsumeResponse) Reset()                    { *m = ConsumeResponse{} }
func (m *ConsumeResponse) String() string            { return proto.CompactTextString(m) }
func (*ConsumeResponse) ProtoMessage()               {}
func (*ConsumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConsumeResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ConsumeResponse) GetRecordBatch() *RecordBatch {
	if m != nil {
		return m.RecordBatch
	}
	return nil
}

type Error struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RecordBatch struct {
	FirstOffset uint64    `protobuf:"varint,1,opt,name=first_offset,json=firstOffset" json:"first_offset,omitempty"`
	Records     []*Record `protobuf:"bytes,3,rep,name=records" json:"records,omitempty"`
}

func (m *RecordBatch) Reset()                    { *m = RecordBatch{} }
func (m *RecordBatch) String() string            { return proto.CompactTextString(m) }
func (*RecordBatch) ProtoMessage()               {}
func (*RecordBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RecordBatch) GetFirstOffset() uint64 {
	if m != nil {
		return m.FirstOffset
	}
	return 0
}

func (m *RecordBatch) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type Record struct {
	Value       []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	OffsetDelta uint32 `protobuf:"varint,2,opt,name=offset_delta,json=offsetDelta" json:"offset_delta,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Record) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Record) GetOffsetDelta() uint32 {
	if m != nil {
		return m.OffsetDelta
	}
	return 0
}

func init() {
	proto.RegisterType((*ProduceRequest)(nil), "log.v1.ProduceRequest")
	proto.RegisterType((*ProduceResponse)(nil), "log.v1.ProduceResponse")
	proto.RegisterType((*ConsumeRequest)(nil), "log.v1.ConsumeRequest")
	proto.RegisterType((*ConsumeResponse)(nil), "log.v1.ConsumeResponse")
	proto.RegisterType((*Error)(nil), "log.v1.Error")
	proto.RegisterType((*RecordBatch)(nil), "log.v1.RecordBatch")
	proto.RegisterType((*Record)(nil), "log.v1.Record")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Log service

type LogClient interface {
	Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error)
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error) {
	out := new(ProduceResponse)
	err := grpc.Invoke(ctx, "/log.v1.Log/Produce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error) {
	out := new(ConsumeResponse)
	err := grpc.Invoke(ctx, "/log.v1.Log/Consume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Log service

type LogServer interface {
	Produce(context.Context, *ProduceRequest) (*ProduceResponse, error)
	Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error)
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.v1.Log/Produce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Produce(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.v1.Log/Consume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Consume(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "log.v1.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Produce",
			Handler:    _Log_Produce_Handler,
		},
		{
			MethodName: "Consume",
			Handler:    _Log_Consume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}

func init() { proto.RegisterFile("log.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x3b, 0x4f, 0xc3, 0x30,
	0x10, 0xee, 0x2b, 0xa9, 0x7a, 0xee, 0x43, 0x32, 0xa8, 0x54, 0x4c, 0xc5, 0x2c, 0x9d, 0x22, 0x11,
	0x44, 0x27, 0x16, 0x0a, 0x48, 0x0c, 0x48, 0x20, 0x8f, 0x2c, 0x51, 0x9a, 0x38, 0x01, 0x29, 0x8d,
	0x8b, 0xed, 0x74, 0xe7, 0x9f, 0x23, 0xdb, 0x79, 0x10, 0xba, 0xc0, 0xe6, 0xfb, 0x4e, 0xf7, 0x3d,
	0x7c, 0x07, 0xa3, 0x8c, 0xa7, 0xde, 0x5e, 0x70, 0xc5, 0xb1, 0xab, 0x9f, 0x87, 0x2b, 0xf2, 0x04,
	0xd3, 0x57, 0xc1, 0xe3, 0x22, 0x62, 0x94, 0x7d, 0x16, 0x4c, 0x2a, 0xbc, 0x86, 0xb1, 0x60, 0x11,
	0x17, 0x71, 0xb0, 0x0d, 0x55, 0xf4, 0xbe, 0xe8, 0x2e, 0xbb, 0x2b, 0xe4, 0x9f, 0x78, 0x76, 0xc0,
	0xa3, 0xa6, 0xb7, 0xd1, 0x2d, 0x8a, 0x44, 0x53, 0x90, 0x35, 0xcc, 0x6a, 0x26, 0xb9, 0xe7, 0xb9,
	0x64, 0xf8, 0x12, 0x1c, 0x26, 0x04, 0x17, 0x25, 0xc7, 0xa4, 0xe2, 0x78, 0xd4, 0x20, 0xb5, 0x3d,
	0xb2, 0x81, 0xe9, 0x3d, 0xcf, 0x65, 0xb1, 0xab, 0x1d, 0xcc, 0xc1, 0xe5, 0x49, 0x22, 0x99, 0x32,
	0x73, 0x03, 0x5a, 0x56, 0x78, 0x01, 0x43, 0x2b, 0x28, 0x17, 0x3d, 0xd3, 0xa8, 0x4a, 0x92, 0xc3,
	0xac, 0xe6, 0xf8, 0x87, 0xf6, 0x51, 0xd6, 0xde, 0x1f, 0xb3, 0xde, 0x80, 0x63, 0x78, 0x30, 0x86,
	0x41, 0xc4, 0x63, 0x66, 0x44, 0x1c, 0x6a, 0xde, 0xda, 0xe6, 0x8e, 0x49, 0x19, 0xa6, 0xcc, 0xf0,
	0x8d, 0x68, 0x55, 0x92, 0x37, 0x40, 0x3f, 0x28, 0xf1, 0x05, 0x8c, 0x93, 0x0f, 0x21, 0x55, 0xd0,
	0x4a, 0x8b, 0x0c, 0xf6, 0x62, 0x23, 0xaf, 0x9a, 0xc8, 0xfd, 0x65, 0x7f, 0x85, 0xfc, 0x69, 0xdb,
	0x5b, 0xf3, 0x05, 0x77, 0xe0, 0x5a, 0x08, 0x9f, 0x82, 0x73, 0x08, 0xb3, 0xc2, 0x9a, 0x1a, 0x53,
	0x5b, 0x68, 0x31, 0x2b, 0x13, 0xc4, 0x2c, 0x53, 0xa1, 0xb1, 0x36, 0xa1, 0xc8, 0x62, 0x0f, 0x1a,
	0xf2, 0xbf, 0xba, 0xd0, 0x7f, 0xe6, 0x29, 0xbe, 0x85, 0x61, 0xb9, 0x49, 0x3c, 0xaf, 0xe4, 0xda,
	0x47, 0x72, 0x7e, 0x76, 0x84, 0xdb, 0x6f, 0x27, 0x1d, 0x3d, 0x5d, 0xee, 0xa2, 0x99, 0x6e, 0x2f,
	0xb8, 0x99, 0xfe, 0xb5, 0x34, 0xd2, 0xd9, 0xba, 0xe6, 0x3c, 0xaf, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x60, 0x39, 0x80, 0xb6, 0xab, 0x02, 0x00, 0x00,
}
